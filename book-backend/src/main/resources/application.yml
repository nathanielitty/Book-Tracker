spring:
  application:
    name: book-tracker-backend
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:development}
  
  datasource:
    url: jdbc:postgresql://${DB_HOST:localhost}:5432/bookdb
    username: postgres
    password: ${SPRING_DATASOURCE_PASSWORD:password}
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      idle-timeout: 300000
      max-lifetime: 1200000
      connection-timeout: 20000
      validation-timeout: 5000
      leak-detection-threshold: 60000
      
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: ${SHOW_SQL:false}
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        use_sql_comments: true
        jdbc:
          batch_size: 25
        order_inserts: true
        order_updates: true
        generate_statistics: false
        
  batch:
    job:
      enabled: false
    jdbc:
      initialize-schema: never
      
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP:localhost:9092}
    consumer:
      group-id: bookapp-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      
  jackson:
    default-property-inclusion: non_null
    serialization:
      write-dates-as-timestamps: false
      fail-on-empty-beans: false
    deserialization:
      fail-on-unknown-properties: false
      
  cache:
    type: caffeine
    caffeine:
      spec: maximumSize=10000,expireAfterAccess=300s

# Application Configuration
app:
  name: ${spring.application.name}
  version: @project.version@
  description: "Netflix-grade Book Tracker Backend"

# Security Configuration
jwt:
  secret: ${JWT_SECRET:your-256-bit-secret-key-here-must-be-long-enough-for-hs256-algorithm-to-work-properly}
  expiration:
    ms: ${JWT_EXPIRATION_MS:3600000} # 1 hour
  refresh:
    expiration:
      ms: ${JWT_REFRESH_EXPIRATION_MS:86400000} # 24 hours

# External API Configuration
google:
  books:
    api-key: ${GOOGLE_BOOKS_API_KEY:your-api-key}
    base-url: https://www.googleapis.com/books/v1

aws:
  s3:
    bucket: ${AWS_S3_BUCKET:your-bucket}
    region: ${AWS_REGION:us-east-1}

# Server Configuration
server:
  port: ${SERVER_PORT:8080}
  servlet:
    context-path: /
  compression:
    enabled: true
    mime-types: text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json
    min-response-size: 1024
  http2:
    enabled: true

# Management and Monitoring
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
      base-path: /actuator
  endpoint:
    health:
      show-details: when-authorized
      show-components: always
  metrics:
    export:
      prometheus:
        enabled: true
  info:
    env:
      enabled: true
    git:
      mode: full

# Logging Configuration
logging:
  level:
    com.nathaniel.bookbackend: ${LOG_LEVEL:INFO}
    org.springframework.security: ${SECURITY_LOG_LEVEL:WARN}
    org.hibernate.SQL: ${SQL_LOG_LEVEL:WARN}
    org.hibernate.type.descriptor.sql.BasicBinder: ${SQL_BIND_LOG_LEVEL:WARN}
    org.springframework.web.filter.CommonsRequestLoggingFilter: ${REQUEST_LOG_LEVEL:DEBUG}
  pattern:
    console: "%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} ${LOG_LEVEL_PATTERN:-%5p} ${PID:- } --- [%t] %-40.40logger{39} : %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}"
  file:
    name: ${LOG_FILE:./logs/book-tracker-backend.log}
    max-size: 100MB
    max-history: 30

---
# Development Profile
spring:
  config:
    activate:
      on-profile: development
  jpa:
    show-sql: true
    properties:
      hibernate:
        generate_statistics: true
logging:
  level:
    com.nathaniel.bookbackend: DEBUG
    org.springframework.web.filter.CommonsRequestLoggingFilter: DEBUG

---
# Production Profile
spring:
  config:
    activate:
      on-profile: production
  jpa:
    show-sql: false
    properties:
      hibernate:
        generate_statistics: false
logging:
  level:
    com.nathaniel.bookbackend: INFO
    org.springframework.web.filter.CommonsRequestLoggingFilter: WARN